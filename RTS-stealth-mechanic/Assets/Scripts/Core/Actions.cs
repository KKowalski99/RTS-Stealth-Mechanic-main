//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Code/Core/Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Actions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Actions"",
    ""maps"": [
        {
            ""name"": ""GameMode"",
            ""id"": ""4781fef9-48d8-406d-b1d5-ec3fa148578a"",
            ""actions"": [
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""0fcbdb7c-a5e5-43bd-a1b8-64c1350d833c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""2cf5136a-10e9-458c-b5fe-ff6105e96ce0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Stealth"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c2522fbf-fa81-4d40-8830-ce62da2c91a6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Assassination"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8ee9d8c2-bbed-4f61-afaa-2aaaf7418e7d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""79bfc4e4-66bf-4ed1-a9a5-b3d5d9aa649c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17800ad1-cdd1-4dc4-97c1-92875ba2ea76"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19e4857a-4280-45a9-abb0-71e75b3d8586"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05d51919-8f21-4f2b-9763-2a1aa84a8dea"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stealth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""646a2950-4164-48b2-9b8b-9a9b5a9b21d0"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Assassination"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameMode
        m_GameMode = asset.FindActionMap("GameMode", throwIfNotFound: true);
        m_GameMode_MouseClick = m_GameMode.FindAction("MouseClick", throwIfNotFound: true);
        m_GameMode_MousePosition = m_GameMode.FindAction("MousePosition", throwIfNotFound: true);
        m_GameMode_Stealth = m_GameMode.FindAction("Stealth", throwIfNotFound: true);
        m_GameMode_Assassination = m_GameMode.FindAction("Assassination", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameMode
    private readonly InputActionMap m_GameMode;
    private IGameModeActions m_GameModeActionsCallbackInterface;
    private readonly InputAction m_GameMode_MouseClick;
    private readonly InputAction m_GameMode_MousePosition;
    private readonly InputAction m_GameMode_Stealth;
    private readonly InputAction m_GameMode_Assassination;
    public struct GameModeActions
    {
        private @Actions m_Wrapper;
        public GameModeActions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseClick => m_Wrapper.m_GameMode_MouseClick;
        public InputAction @MousePosition => m_Wrapper.m_GameMode_MousePosition;
        public InputAction @Stealth => m_Wrapper.m_GameMode_Stealth;
        public InputAction @Assassination => m_Wrapper.m_GameMode_Assassination;
        public InputActionMap Get() { return m_Wrapper.m_GameMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameModeActions set) { return set.Get(); }
        public void SetCallbacks(IGameModeActions instance)
        {
            if (m_Wrapper.m_GameModeActionsCallbackInterface != null)
            {
                @MouseClick.started -= m_Wrapper.m_GameModeActionsCallbackInterface.OnMouseClick;
                @MouseClick.performed -= m_Wrapper.m_GameModeActionsCallbackInterface.OnMouseClick;
                @MouseClick.canceled -= m_Wrapper.m_GameModeActionsCallbackInterface.OnMouseClick;
                @MousePosition.started -= m_Wrapper.m_GameModeActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_GameModeActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_GameModeActionsCallbackInterface.OnMousePosition;
                @Stealth.started -= m_Wrapper.m_GameModeActionsCallbackInterface.OnStealth;
                @Stealth.performed -= m_Wrapper.m_GameModeActionsCallbackInterface.OnStealth;
                @Stealth.canceled -= m_Wrapper.m_GameModeActionsCallbackInterface.OnStealth;
                @Assassination.started -= m_Wrapper.m_GameModeActionsCallbackInterface.OnAssassination;
                @Assassination.performed -= m_Wrapper.m_GameModeActionsCallbackInterface.OnAssassination;
                @Assassination.canceled -= m_Wrapper.m_GameModeActionsCallbackInterface.OnAssassination;
            }
            m_Wrapper.m_GameModeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseClick.started += instance.OnMouseClick;
                @MouseClick.performed += instance.OnMouseClick;
                @MouseClick.canceled += instance.OnMouseClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @Stealth.started += instance.OnStealth;
                @Stealth.performed += instance.OnStealth;
                @Stealth.canceled += instance.OnStealth;
                @Assassination.started += instance.OnAssassination;
                @Assassination.performed += instance.OnAssassination;
                @Assassination.canceled += instance.OnAssassination;
            }
        }
    }
    public GameModeActions @GameMode => new GameModeActions(this);
    public interface IGameModeActions
    {
        void OnMouseClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnStealth(InputAction.CallbackContext context);
        void OnAssassination(InputAction.CallbackContext context);
    }
}
